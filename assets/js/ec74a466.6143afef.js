"use strict";(self.webpackChunk_prodigypnp_website=self.webpackChunk_prodigypnp_website||[]).push([[108],{9613:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(9496);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,y=u["".concat(i,".").concat(d)]||u[d]||v[d]||a;return r?n.createElement(y,l(l({ref:t},p),{},{components:r})):n.createElement(y,l({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6112:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>v,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(1163),o=(r(9496),r(9613));const a={sidebar_position:2,title:"[Hack] Set Level",description:"Set your Prodigy level"},l=void 0,s={unversionedId:"bookmarklets/hack-levels",id:"bookmarklets/hack-levels",title:"[Hack] Set Level",description:"Set your Prodigy level",source:"@site/docs/bookmarklets/hack-levels.md",sourceDirName:"bookmarklets",slug:"/bookmarklets/hack-levels",permalink:"/docs/bookmarklets/hack-levels",draft:!1,editUrl:"https://github.com/ProdigyPNP/PNP-Website/tree/master/docs/bookmarklets/hack-levels.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"[Hack] Set Level",description:"Set your Prodigy level"},sidebar:"tutorialSidebar",previous:{title:"Hacking without extensions",permalink:"/docs/bookmarklets/motivation"},next:{title:"[Hack] Set Gold",permalink:"/docs/bookmarklets/hack-gold"}},i={},c=[],p={toc:c},u="wrapper";function v(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Bookmarklet to set your level to 100:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"javascript:!function(e){const t=Boot.prototype.game._state._current.user.source,a=parseInt(100);if(a>100)return void(t.getLevel=()=>a);if(1===a)return t.data.stars=0,t.data.level=1,void(t.getLevel=()=>1);const r=a-2;t.data.stars=Math.round((1-Math.pow(1.042,r))/(1-1.042)*20+10),t.data.level=+a,t.getLevel=()=>t.data.level}();\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Source Code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/** A function to set the player's level in Prodigy Math Game */\nfunction setLevel (lvl) {\n\n    /** Player variable */\n    const player = Boot.prototype.game._state._current.user.source;\n\n    /** Level that we're trying to set to */\n    const level = parseInt(lvl);\n\n    // We cannot set the level above 100, but we can temporarilly override it\n    if (level > 100) {\n        player.getLevel = () => level;\n        return;\n    };\n\n    // Setting the level to 1 works better when you don't run xpConstant calculations\n    if (level === 1) {\n        player.data.stars = 0;\n        player.data.level = 1;\n        player.getLevel = () => 1;\n        return;\n    }\n\n    // now we calculate how many stars the level *should* have\n    // from 3-16-1.js:8382\n    const i = level - 2;\n\n    /** xpConstant from 3-16-1.js:8528 */\n    const xpConstant = 1.042;\n\n    // Math time lmao\n    player.data.stars = Math.round((1 - Math.pow(xpConstant, i)) / (1 - xpConstant) * 20 + 10);\n    player.data.level = +level;\n\n    // Override the getLevel function to return the player.data.level that we overrwrote\n    player.getLevel = () => player.data.level;\n\n}\n\nsetLevel(100);\n")))}v.isMDXComponent=!0}}]);